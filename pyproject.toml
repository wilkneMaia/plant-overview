[tool.poetry]
name = "plant-overview"
version = "0.1.0"
description = ""
authors = ["Wilkne Maia <72803395+wilkneMaia@users.noreply.github.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
pandas = "^2.2.3"
streamlit = "^1.44.0"
plotly = "^6.0.1"
helper-utils = "^0.0.8"

[tool.poetry.group.dev.dependencies]
autopep8 = "^2.3.2"
python-dotenv = "^1.1.0"
pytest = "^8.3.5"
pytest-cov = "^6.0.0"
taskipy = "^1.14.1"
ruff = "^0.11.2"
isort = "^6.0.1"
freezegun = "^1.5.1"
black = "^25.1.0"
autoflake = "^2.3.1"
ipykernel = "^6.29.5"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 79
exclude = ['.venv', 'migrations']

[tool.ruff.lint]
preview = true
select = ['I', 'F', 'E', 'W', 'PL', 'PT']

[tool.ruff.format]
preview = true
quote-style = 'single'

[tool.pytest.ini_options]
pythonpath = "."
addopts = '-p no:warnings'

[tool.taskipy.tasks]
# --- Lint & Formatação ---
lint = """
    ruff check . &&
    black --check . &&
    isort --check . &&
    mypy --strict --follow-imports=silent --show-error-codes .
"""
format = """
    autoflake --remove-all-unused-imports --remove-unused-variables --recursive --in-place . &&
    isort --profile=black . &&
    black --quiet . &&
    ruff check --fix --exit-zero .
"""
fix = "ruff check --fix . && task format"  # Novo: Corrige automaticamente problemas simples

# --- Testes ---
test = "pytest -x --cov=app --cov-report=term-missing"  # Mostra linhas não cobertas
test_ci = "pytest -x --cov=app --cov-report=xml"        # Saída em XML para CI (GitHub Actions, etc.)
test_watch = "ptw -- -x --cov=app"                      # pytest-watch (instale com `pytest-watch`)

# --- Ambiente ---
venv = "source .venv/bin/activate"                      # Mais claro que 'py_local'
clean = "find . -type f -name '*.pyc' -delete && find . -type d -name '__pycache__' -exec rm -rf {} +"  # Limpa cache

# --- Streamlit ---
run = "streamlit run app.py"
run_dev = "ENVIRONMENT=development streamlit run app.py"  # Modo desenvolvimento

# --- Instalação ---
install_dev = "poetry install --with dev"                # Instala dependências de dev
